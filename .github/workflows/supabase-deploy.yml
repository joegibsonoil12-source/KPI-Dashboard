name: Supabase Deploy (db + functions)

on:
  push:
    branches:
      - main
    paths:
      - 'migrations/**'
      - 'db/**'
      - 'functions/**'
      - 'supabase/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'src/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Supabase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Verify supabase CLI via npx
        run: |
          set -euo pipefail
          npx --yes supabase@latest --version

      - name: Authenticate supabase CLI (via npx)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          npx --yes supabase@latest login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Link project (via npx)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          npx --yes supabase@latest link --project-ref "$SUPABASE_PROJECT_REF" || true

      - name: Push CLI-managed migrations (only if supabase/ exists) (via npx)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          if [ -d "supabase" ]; then
            echo "Found supabase/ directory — running supabase db push (via npx)"
            npx --yes supabase@latest db push --yes || npx --yes supabase@latest db push
          else
            echo "No supabase/ directory found — skipping CLI-managed migrations"
          fi

      - name: Run direct SQL migrations (psql) if SUPABASE_DB_URL provided
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_DB_URL:-}" ]; then
            echo "SUPABASE_DB_URL provided — applying SQL migrations if present"
            migration_dirs=("migrations" "db" "sql")
            sql_files_found=false
            for dir in "${migration_dirs[@]}"; do
              if [ -d "$dir" ] && [ "$(find "$dir" -name "*.sql" | wc -l)" -gt 0 ]; then
                echo "Found SQL files in $dir/ — applying migrations"
                sudo apt-get update -y
                sudo apt-get install -y postgresql-client
                for f in "$dir"/*.sql; do
                  if [ -f "$f" ]; then
                    echo "Applying $f"
                    PGPASSWORD="$(echo "$SUPABASE_DB_URL" | sed -n 's#.*://[^:]*:\([^@]*\)@.*#\1#p')" \
                      psql "$SUPABASE_DB_URL" -f "$f"
                  fi
                done
                sql_files_found=true
                break
              fi
            done
            if [ "$sql_files_found" = false ]; then
              echo "No SQL files found in any migration directories (${migration_dirs[*]}) — skipping direct SQL migrations"
            fi
          else
            echo "No SUPABASE_DB_URL provided — skipping direct SQL migrations"
          fi

      - name: Debug: show functions tree and entry file before deploy
        run: |
          echo "PWD: $(pwd)"
          echo "Repo root listing:"
          ls -la
          echo "supabase directory:"
          ls -la supabase || true
          echo "supabase/functions:"
          ls -la supabase/functions || true
          echo "Top-level functions directory (if any):"
          ls -la functions || true
          echo "Print entry file if exists:"
          head -n 200 supabase/functions/api/index.ts || true

      - name: Deploy Edge Functions (check multiple locations) (via npx)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          candidates=("./functions" "./server/functions" "./services/functions" "./server" "./services" "./supabase/functions")
          functions_dir=""
          for dir in "${candidates[@]}"; do
            if [ -d "$dir" ]; then
              if [ "$(find "$dir" -maxdepth 1 -type d ! -path "$dir" | wc -l)" -gt 0 ] || \
                 [ "$(find "$dir" -maxdepth 1 -name "*.js" -o -name "*.ts" | wc -l)" -gt 0 ]; then
                functions_dir="$dir"
                echo "Found functions in: $functions_dir"
                break
              fi
            fi
          done

          if [ -n "$functions_dir" ]; then
            echo "Deploying functions from: $functions_dir"
            for d in "$functions_dir"/*; do
              if [ -d "$d" ]; then
                name=$(basename "$d")
                echo "Processing function directory: $name"

                if [ -f "$d/package.json" ]; then
                  echo "Found package.json in $name, installing dependencies"
                  cd "$d"
                  if [ -f package-lock.json ]; then
                    npm ci --production --no-audit --no-fund || true
                  else
                    npm install --production --no-audit --no-fund || true
                  fi

                  if npm run | grep -q ' build'; then
                    echo "Running build script for $name"
                    npm run build || true
                  fi
                  cd - > /dev/null
                fi

                echo "Attempting to deploy function by name (no unsupported flags)..."
                npx --yes supabase@latest functions deploy "$name" --debug || npx --yes supabase@latest functions deploy "$d" --debug
              fi
            done
          else
            echo "No functions directory found in any of the candidate locations: ${candidates[*]}"
            echo "Skipping functions deployment."
          fi

      - name: Post Set up Node.js
        run: |
          set -euo pipefail
          echo "Post setup"

      - name: Post Checkout
        run: |
          set -euo pipefail
          echo "Post checkout"

      - name: Complete job
        run: echo "Done"
