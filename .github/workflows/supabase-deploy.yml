name: Supabase Deploy (db + functions)

on:
  push:
    branches:
      - main
    paths:
      - "migrations/**"
      - "db/**"
      - "functions/**"
      - "supabase/**"
      - ".supabase/**"
      - ".github/workflows/supabase-deploy.yml"
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Supabase
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify Supabase CLI via npx
        run: |
          set -euo pipefail
          npx --yes supabase@latest --version

      - name: Debug show config/state
        run: |
          set -euo pipefail
          echo "PWD: $(pwd)"
          echo
          echo "Repo root listing:"; ls -la
          echo
          echo "supabase/ listing:"; ls -la supabase || true
          echo
          echo "Show supabase/config.toml:"; cat supabase/config.toml || true
          echo
          echo "Show supabase/.supabase/project:"; cat supabase/.supabase/project || true

      - name: Authenticate and link (optional link if secret provided)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail

          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "SUPABASE_ACCESS_TOKEN not set; skipping Supabase deploy"
            exit 0
          fi

          mkdir -p supabase
          npx --yes supabase@latest login --token "$SUPABASE_ACCESS_TOKEN"

          # Safety check: print SUPABASE_PROJECT_REF length and validate project file
          if [ -n "${SUPABASE_PROJECT_REF:-}" ]; then
            ref_length=${#SUPABASE_PROJECT_REF}
            echo "SUPABASE_PROJECT_REF length: $ref_length (not printing actual value for security)"
            
            # Remove suspicious project file if it's too short (likely corrupted)
            if [ -f "supabase/.supabase/project" ]; then
              project_file_size=$(wc -c < "supabase/.supabase/project")
              if [ "$project_file_size" -lt 10 ]; then
                echo "WARNING: supabase/.supabase/project file is suspiciously small ($project_file_size bytes). Removing it."
                rm -f "supabase/.supabase/project"
              fi
            fi
          fi

          if [ -f "supabase/.supabase/project" ]; then
            echo "Project already linked in supabase/.supabase/project"
          elif [ -n "${SUPABASE_PROJECT_REF:-}" ]; then
            echo "Linking Supabase project using SUPABASE_PROJECT_REF"
            (cd supabase && npx --yes supabase@latest link --project-ref "$SUPABASE_PROJECT_REF" --debug)
          else
            echo "No SUPABASE_PROJECT_REF secret and no existing link; Supabase operations will be skipped."
          fi

      - name: "Show Supabase link status (cwd: supabase)"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        working-directory: supabase
        run: |
          set -euo pipefail
          npx --yes supabase@latest status --debug || true

      - name: "Push CLI-managed migrations (cwd: supabase)"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        working-directory: supabase
        run: |
          set -euo pipefail
          if [ -z "${SUPABASE_ACCESS_TOKEN:-}" ]; then
            echo "SUPABASE_ACCESS_TOKEN not set; skipping"
            exit 0
          fi
          if [ ! -f ".supabase/project" ]; then
            echo "Not linked (supabase/.supabase/project missing); skipping db push"
            exit 0
          fi
          npx --yes supabase@latest db push --debug

      - name: Run direct SQL migrations (psql) if SUPABASE_DB_URL provided
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_DB_URL:-}" ]; then
            echo "SUPABASE_DB_URL provided -- applying SQL migrations if present"
            migration_dirs=("migrations" "db" "sql")
            sql_files_found=false
            for dir in "${migration_dirs[@]}"; do
              if [ -d "$dir" ] && [ "$(find "$dir" -name '*.sql' | wc -l)" -gt 0 ]; then
                echo "Found SQL files in $dir/ -- applying migrations"
                sudo apt-get update -y
                sudo apt-get install -y postgresql-client
                for f in "$dir"/*.sql; do
                  if [ -f "$f" ]; then
                    echo "Applying $f"
                    PGPASSWORD="$(echo "$SUPABASE_DB_URL" | sed -n 's#.*://[^:]*:\(.*\)@.*#\1#p')" \
                      psql "$SUPABASE_DB_URL" -f "$f"
                  fi
                done
                sql_files_found=true
                break
              fi
            done
            if [ "$sql_files_found" = false ]; then
              echo "No SQL files found in any migration directories (${migration_dirs[*]}) -- skipping direct SQL migrations"
            fi
          else
            echo "No SUPABASE_DB_URL provided -- skipping direct SQL migrations"
          fi

      - name: Debug show functions tree and entry file before deploy
        run: |
          set -euo pipefail
          echo "PWD: $(pwd)"
          echo "Repo root listing:"; ls -la
          echo "supabase directory:"; ls -la supabase || true
          echo "supabase/functions:"; ls -la supabase/functions || true
          echo "Top-level functions directory (if any):"; ls -la functions || true
          echo "Print entry file if exists:"; head -n 200 supabase/functions/api/index.ts || true

      - name: Deploy Edge Functions (check multiple locations) (via npx)
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          candidates=( "./functions" "./server/functions" "./services/functions" "./server" "./services" "./supabase/functions" )
          functions_dir=""
          for dir in "${candidates[@]}"; do
            if [ -d "$dir" ]; then
              if [ "$(find "$dir" -maxdepth 1 -type d ! -path "$dir" | wc -l)" -gt 0 ] || \
                 [ "$(find "$dir" -maxdepth 1 -name '*.js' -o -name '*.ts' | wc -l)" -gt 0 ]; then
                functions_dir="$dir"
                echo "Found functions in: $functions_dir"
                break
              fi
            fi
          done

          if [ -n "$functions_dir" ]; then
            echo "Deploying functions from: $functions_dir"
            for d in "$functions_dir"/*; do
              if [ -d "$d" ]; then
                name=$(basename "$d")
                echo "Processing function directory: $name"

                if [ -f "$d/package.json" ]; then
                  echo "Installing deps for $name (if needed)"
                  pushd "$d" >/dev/null
                  if [ -f package-lock.json ]; then
                    npm ci --production --no-audit --no-fund || true
                  else
                    npm install --production --no-audit --no-fund || true
                  fi
                  if npm run | grep -q ' build'; then
                    echo "Running build script for $name"
                    npm run build || true
                  fi
                  popd >/dev/null
                fi

                echo "Deploying function: $name"
                npx --yes supabase@latest functions deploy "$name" --debug || npx --yes supabase@latest functions deploy "$d" --debug
              fi
            done
          else
            echo "No functions directory found in any of the candidate locations: ${candidates[*]}"
            echo "Skipping functions deployment."
          fi

      - name: Complete job
        run: echo "Done"
