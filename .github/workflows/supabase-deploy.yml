name: Supabase Deploy (db + functions)

on:
  push:
    branches:
      - main
    paths:
      - 'migrations/**'
      - 'db/**'
      - 'functions/**'
      - '.github/workflows/**'
      - 'package.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'src/**'

jobs:
  deploy:
    name: Deploy Supabase
    runs-on: ubuntu-latest
    concurrency:
      group: supabase-deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install supabase CLI
        run: npm install -g supabase@latest

      - name: Authenticate supabase CLI
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          supabase login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Link project
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          supabase link --project-ref "$SUPABASE_PROJECT_REF" || true

      - name: Push CLI-managed migrations
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          echo "Running supabase db push"
          supabase db push --project-ref "$SUPABASE_PROJECT_REF"

      - name: Run direct SQL migrations (psql) if SUPABASE_DB_URL provided
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_DB_URL:-}" ] && [ -d "migrations" ]; then
            echo "Applying SQL migrations from migrations/ using psql"
            sudo apt-get update -y
            sudo apt-get install -y postgresql-client
            for f in migrations/*.sql; do
              echo "Applying $f"
              PGPASSWORD="$(echo "$SUPABASE_DB_URL" | sed -n 's#.*://[^:]*:\([^@]*\)@.*#\1#p')" \
                psql "$SUPABASE_DB_URL" -f "$f"
            done
          else
            echo "No SUPABASE_DB_URL or no migrations/ directory — skipping direct SQL migrations"
          fi

      - name: Deploy Edge Functions (only if functions/ exists)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          if [ -d "./functions" ]; then
            echo "Found ./functions directory — deploying functions"
            for d in ./functions/*; do
              if [ -d "$d" ]; then
                name=$(basename "$d")
                echo "Deploying function: $name"
                supabase functions deploy "$name" --project-ref "$SUPABASE_PROJECT_REF"
              fi
            done
          else
            echo "No ./functions directory found — skipping functions deploy"
          fi
