name: Supabase Deploy (migrations + functions)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install supabase CLI
        run: npm install -g supabase

      - name: Authenticate supabase CLI
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          supabase login --token "$SUPABASE_ACCESS_TOKEN"

      - name: Link project (safe if already linked)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          supabase link --project-ref "$SUPABASE_PROJECT_REF" || true

      - name: Push CLI-managed migrations
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          echo "Running supabase db push"
          supabase db push --project-ref "$SUPABASE_PROJECT_REF"

      - name: Run psql SQL migrations (optional if SUPABASE_DB_URL is provided)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        run: |
          set -euo pipefail
          if [ -n "${SUPABASE_DB_URL:-}" ]; then
            echo "Running direct SQL migrations with psql"
            sudo apt-get update -y
            sudo apt-get install -y postgresql-client
            for f in migrations/*.sql; do
              echo "Applying $f"
              PGPASSWORD="$(echo "$SUPABASE_DB_URL" | sed -n 's#.*://[^:]*:\([^@]*\)@.*#\1#p')" \
                psql "$SUPABASE_DB_URL" -f "$f"
            done
          else
            echo "No SUPABASE_DB_URL provided — skipping psql migrations"
          fi

      - name: Deploy Edge Functions (per-directory)
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -euo pipefail
          if [ -d "./functions" ]; then
            for d in ./functions/*; do
              if [ -d "$d" ]; then
                name=$(basename "$d")
                echo "Deploying function: $name"
                supabase functions deploy "$name" --project-ref "$SUPABASE_PROJECT_REF"
              fi
            done
          else
            echo "No ./functions directory found — skipping functions deploy"
          fi
